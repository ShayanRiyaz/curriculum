<!--title={Dijkstra's Algorithm (continued)}-->

<!--badges={Algorithms:15}-->

<!--concepts={Dijkstra'sAlgorithm, Dijkstra'sdirected}-->

## Using Dijkstra's Algorithm on the Current Graph



![](../images/7a.jpg)



###### current_node = a

|          | a         | b         | c         | d         |
| -------- | --------- | --------- | --------- | --------- |
| visited? | unvisited | unvisited | unvisited | unvisited |
| distance | 0         | ∞         | ∞         | ∞         |



3. For the current node, consider all of its unvisited neighbors and calculate their *tentative* distances through the current node. If the distance is smaller than what the node currently has, we update the distance of the node.

   ![](../images/7b.jpg)

   ###### current_node = a

   ###### unvisited set = {"a", "b", "c", "d"}

   |          | a         | b         | c         | d         |
   | -------- | --------- | --------- | --------- | --------- |
   | visited? | unvisited | unvisited | unvisited | unvisited |
   | distance | 0         | 6         | ∞         | ∞         |

   In this case, `a ` has 2 neighbors: ` b` and ` c`. Both `b` and `c` are unvisited, so we need to calculate their distances.  First, let's process `b`. `b` will have a new distance of 6, as b is 6 away from the initial node `a`  and 6 is smaller than ∞. Thus, we will update the distance for `b` to 6.

   

   Now, let's process node `c`:

   ![](../images/7c.jpg)

###### current_node = a

###### unvisited set = {"a", "b", "c", "d"}

|          | a         | b         | c         | d         |
| -------- | --------- | --------- | --------- | --------- |
| visited? | unvisited | unvisited | unvisited | unvisited |
| distance | 0         | 6         | 4         | ∞         |

 Going through the same process as node `b`, the distance of `c`  will now be updated to 4.

4. When we are done considering all of the unvisited neighbors of the current node, mark the current node as "visited" and remove it from the *`unvisited set`*.

###### current_node = a

###### unvisited set = { "b", "c", "d"}

|          | a       | b         | c         | d         |
| -------- | ------- | --------- | --------- | --------- |
| visited? | visited | unvisited | unvisited | unvisited |
| distance | 0       | 6         | 4         | ∞         |



5. If the destination node has been marked visited (when planning a route between two specific nodes) or if the smallest tentative distance among the nodes in the *unvisited set* is infinity (when planning a complete traversal, this occurs when there is no connection between the initial node and remaining unvisited nodes), then stop. The algorithm has finished.
6. Otherwise, select the unvisited node marked with the smallest tentative distance and set it as the new "current node." Then, go back to step 3.

![](../images/7d.jpg)

###### current_node = c

###### unvisited set = { "b", "d"}

|          | a       | b         | c       | d         |
| -------- | ------- | --------- | ------- | --------- |
| visited? | visited | unvisited | visited | unvisited |
| distance | 0       | 6         | 4       | 10        |

Since `c`  has a smaller distance than b, we process c first. We update the distance of  `d` to 10, as 4 + 6 = 10. We mark c as "visited" and delete it from the *`unvisited set`*.

Then, we process the node `b`, as the distance of `b` is smaller than the distance of `d`.

![](../images/7e.jpg)



###### current_node = b

###### unvisited set = {"d"}

|          | a       | b       | c       | d         |
| -------- | ------- | ------- | ------- | --------- |
| visited? | visited | visited | visited | unvisited |
| distance | 0       | 6       | 4       | 8         |

`b`  has a unvisited neighbor `d` . Going through `b`, the path from `a` to ` d`  is 6 + 2 = 8, which is smaller than 10 ( `d`'s current distance). Thus, we update the distance of `d` to 8. Set `b` as "visited" and delete it from the *`unvisited set`*.

According to step 5, since we only have a unvisited node left and it's already updated to the smallest path, we're done!

